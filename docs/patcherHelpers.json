[
  {
    "name": "loadRecords",
    "type": "function",
    "args": [{
      "name": "search",
      "type": "string",
      "description": "Records to search for.  See xelib.GetRecords for more information."
    }, {
      "name": "includeOverrides",
      "type": "boolean",
      "description": "Pass true to load both master and override records.  Default false."
    }],
    "returns": {
      "type": "array of handle"
    },
    "description": "Helper function which allows you to load records from the files your patcher is targetting."
  },
  {
    "name": "allSettings",
    "type": "object",
    "description": "Contains the settings of all patchers, with each patcher's settings in a property corresponding to their id.  Use this if you need to change your patcher's behavior when a user is using another patcher."
  },
  {
    "name": "logMessage",
    "type": "function",
    "args": [{
      "name": "message",
      "type": "string"
    }],
    "description": "Call this function to print a message to the progress modal's log."
  },
  {
    "name": "newRecord",
    "type": "function",
    "args": [{
      "name": "container",
      "type": "handle"
    }, {
      "name": "path",
      "type": "string"
    }, {
      "name": "id",
      "type": "string"
    }],
    "description": "Adds a new record to the input `container` at `path`.  Uses record consistency caching to make certain the record stays at the same Form ID when the patch gets regenerated.  This function should **always** be used when creating new records in a UPF patch file.  The `id` should be a unique string value for the record, typically the record's editor ID.  You should use a unique prefix for the id so there won't be collisions with other patchers.  The new record's editor ID will be set to `id` if the record has an Editor ID field."
  }
]